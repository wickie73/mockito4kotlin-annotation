ext {
    libGroupId = 'io.github.wickie73'
    libArtifactId = 'mockito4kotlin-annotation'
    libVersion = version
    title = 'Mockito Annotations for Kotlin'
    descriptionPOM = 'Mockito Annotations for Kotlin: a small Kotlin library which supports Annotations for Mockito, Mockito-Kotlin.'
    licenseURL = 'https://opensource.org/licenses/MIT'
    projectURL = 'https://github.com/wickie73/mockito4kotlin-annotation'
}

ext.sourceManifest = manifest {
    attributes(
        "Bundle-Name": title + " Sources",
        "Bundle-SymbolicName": project.name + ".source",
        "Bundle-Version": version,
        "Bundle-ManifestVersion": "2",
        "Bundle-ActivationPolicy": "lazy",
        "Bundle-License": licenseURL,
        "Created-By": "wickie73",
        "Eclipse-SourceBundle": project.name + ";version=" + '"' + version + '"'
    )
}

jar.manifest {
    attributes(
        "Bundle-Name": title,
        "Bundle-SymbolicName": project.name,
        "Bundle-Version": version,
        "Bundle-RequiredExecutionEnvironment": "JavaSE-1.8",
        "Bundle-ManifestVersion": "2",
        "Bundle-ActivationPolicy": "lazy",
        "Bundle-License": licenseURL,
        "Implementation-Title": title,
        "Implementation-Version": version,
        "Created-By": "wickie73",
        "Specification-Title": title,
        "Specification-Version": version,
        "Specification-Vendor": "wickie73",
        "Export-Package": "io.github.wickie73.mockito4kotlin.annotation",
        "Import-Package": 'com.nhaarman.mockitokotlin2;version="[2.0.0,3)"',
        "Require-Bundle": 'org.mockito;version="[2.24,3)",org.jetbrains.kotlin;version="[1.3.0,1.5)"',
        "Build-Jdk": java_version
    )
}

// javadoc & dokka
dokkaHtml {
    dokkaSourceSets {
        commonMain {}
        jvmMain {
            sourceLink {
                localDirectory.set(file("src/main/kotlin"))
                remoteUrl.set(uri("https://github.com/wickie73/mockito4kotlin-annotation/tree/master/src/main/kotlin").toURL())
                remoteLineSuffix.set("#L")
            }
        }
    }
}

task sourcesJar(type: Jar) {
    classifier = "sources"
    manifest = project.manifest {
        from sourceManifest
    }
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from dokkaHtml.outputDirectory
}

javadoc.dependsOn dokkaHtml

artifacts {
    archives javadocJar, sourcesJar
}

// Signing
signing {
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            groupId = libGroupId
            artifactId = libArtifactId
            version = libVersion

            artifact sourcesJar
            artifact javadocJar

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = title
                description = descriptionPOM
                url = projectURL
                licenses {
                    license {
                        name = 'MIT'
                        url = licenseURL
                    }
                }
                developers {
                    developer {
                        id = 'wickie73'
                        name = 'Wilhelm Schulenburg'
                    }
                }
            }
        }
    }
    // locale
    repositories { maven { url = "file://${buildDir}/repo" } }
}

// Avoid generation of the module metadata so that we don't have to publish an additional file
// and keep the build logic simple.
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

//fleshes out problems with Maven pom generation when building
tasks.build.dependsOn('publishJavaLibraryPublicationToMavenLocal')

// Deploying
nexusPublishing {
    repositories {
        sonatype {
            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            if (project.hasProperty("ossrhUsername")) {
                username = project.property("ossrhUsername")
                password = project.property("ossrhPassword")
            }
        }
    }

}

// Deploying
apply plugin: 'maven'

// Build, sign, and upload
uploadArchives {
    def ossrhUser = project.hasProperty("ossrhUsername") ? project.property("ossrhUsername") : ''
    def ossrhPwd = project.hasProperty("ossrhPassword") ? project.property("ossrhPassword") : ''

    repositories {
        mavenDeployer {

            // Sign POM
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            // locale
            repositories { maven { url = "file://${buildDir}/repo" } }

            // Destination
            if (ossrhUser != '') {
                repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUser, password: ossrhPwd)
                }
                snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUser, password: ossrhPwd)
                }
            }

            // Add required metadata to POM
            pom.project {
                name title
                packaging 'jar'
                description descriptionPOM
                url projectURL

                groupId libGroupId
                artifactId libArtifactId
                version libVersion

                scm {
                    connection 'scm:git:git://github.com/wickie73/mockito4kotlin-annotation.git'
                    developerConnection 'scm:git:https://github.com/wickie73/mockito4kotlin-annotation.git'
                    url 'https://github.com/wickie73/mockito4kotlin-annotation/tree/main'
                }

                licenses {
                    license {
                        name = 'MIT'
                        url = licenseURL
                    }
                }

                developers {
                    developer {
                        id = 'wickie73'
                        name = 'Wilhelm Schulenburg'
                    }
                }
            }
        }
    }
}
